Index: webapp/graphite/render/views.py
===================================================================
--- webapp/graphite/render/views.py	(revision 6815)
+++ webapp/graphite/render/views.py	(working copy)
@@ -14,6 +14,7 @@
 import csv
 import math
 from datetime import datetime
+import sys
 from time import time
 from random import shuffle
 from httplib import CannotSendRequest
@@ -41,6 +42,7 @@
 from graphite.render.glyph import GraphTypes
 
 from django.http import HttpResponse, HttpResponseServerError, HttpResponseRedirect
+from django.utils.datastructures import MultiValueDict
 from django.template import Context, loader
 from django.core.cache import cache
 from django.core.exceptions import ObjectDoesNotExist
@@ -49,7 +51,14 @@
 
 def renderView(request):
   start = time()
-  (graphOptions, requestOptions) = parseOptions(request)
+
+  if request.REQUEST.has_key('json_request'):
+    (graphOptions, requestOptions) = parseDataOptions(request.REQUEST['json_request'])
+  elif request.is_ajax() and request.method == 'POST':
+    (graphOptions, requestOptions) = parseDataOptions(request.raw_post_data)
+  else:
+    (graphOptions, requestOptions) = parseOptions(request)
+
   useCache = 'noCache' not in requestOptions
   cacheTimeout = requestOptions['cacheTimeout']
   requestContext = {
@@ -225,7 +234,24 @@
 
 def parseOptions(request):
   queryParams = request.REQUEST
+  return parseOptionsDictionary(queryParams)
 
+
+def parseDataOptions(data):
+  queryParams = MultiValueDict()
+  try:
+    options = json.loads(data)
+    for k,v in options.items():
+      if isinstance(v, list):
+        queryParams.setlist(k, v)
+      else:
+        queryParams[k] = unicode(v)
+  except:
+    log.exception('json_request decode error')
+  return parseOptionsDictionary(queryParams)
+
+
+def parseOptionsDictionary(queryParams):
   # Start with some defaults
   graphOptions = {'width' : 330, 'height' : 250}
   requestOptions = {}
@@ -243,6 +269,10 @@
 
   # Extract the targets out of the queryParams
   mytargets = []
+  # json_request format
+  if len(queryParams.getlist('targets')) > 0:
+    mytargets = queryParams.getlist('targets')
+
   # Normal format: ?target=path.1&target=path.2
   if len(queryParams.getlist('target')) > 0:
     mytargets = queryParams.getlist('target')
